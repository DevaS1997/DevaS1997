@model EFCRUD.Controllers.viewmodel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<section class="pt-2">
    <div class="">
        <div class="">
            <div class="col-12">
                @foreach (var bl in Model.blog)
                {

                    <div class="card rounded-0 bg-dark-overlay-5 overflow-hidden card-bg-scale h-400 text-center" style="background-image:url(../../assets/images/BlogImage/@bl.image); background-position: center left; background-size: cover;">
                        <div class="card-img-overlay d-flex align-items-center p-3 p-sm-4">
                            <div class="w-100 my-auto">
                                <a href="#" class="badge bg-danger mb-2"><i class="bi bi-circle-fill me-2 small fw-bold"></i>@bl.BlogCategory.Category</a>
                                <h2 class="text-white display-5">10 tell-tale signs you need to get a new startup.</h2>
                                @*<ul class="nav nav-divider text-white-force align-items-center justify-content-center">
                                        <li class="nav-item">
                                            <div class="nav-link">
                                                <div class="d-flex align-items-center text-white position-relative">
                                                    <div class="avatar avatar-sm">
                                                        <img class="avatar-img rounded-circle" src="assets/images/avatar/11.jpg" alt="avatar">
                                                    </div>
                                                    <span class="ms-3">by <a href="#" class="stretched-link text-reset btn-link">Louis</a></span>
                                                </div>
                                            </div>
                                        </li>
                                        <li class="nav-item">Nov 15, 2021</li>
                                        <li class="nav-item">5 min read</li>
                                    </ul>*@
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>


<section class="pt-0">
    <div class="container position-relative" data-sticky-container>
        <div class="row">
            <div class="col-lg-9 mb-5">
                @foreach (var bl in Model.blog)
                {
                    @Html.Raw(bl.Description)
                }
                <div class="mt-5 border-bottom py-5 border-top">
                    <h3>Review & Rating</h3>
                    @using (Html.BeginForm("Review", "Home", FormMethod.Post, new { @class = "row g-3 mt-2", id = "review_form" }))
                    {
                        <input type="hidden" name="Rating" id="Rating" />
                        <input type="hidden" name="BlogId" id="BlogId" value="@foreach (var bl in Model.blog){@Html.Raw(bl.Id)}" />
                        <input type="hidden" name="UserId" id="UserId" value="@if (Session["id"] != null){@Session["id"] }" />
                        <input type="hidden" name="Date" id="Date" value="@DateTime.Now" />
                        <ul class="d-flex list-unstyled" onmouseout="CRateSelected()">
                            <li class="mx-2"><span onmouseover="CRateOver(1)" id="span1" onmouseout="CRateOut(1)" onclick="CRateClick(1)" class="bi bi-star fs-4"></span></li>
                            <li class="mx-2"><span onmouseover="CRateOver(2)" id="span2" onmouseout="CRateOut(2)" onclick="CRateClick(2)" class="bi bi-star fs-4"></span></li>
                            <li class="mx-2"><span onmouseover="CRateOver(3)" id="span3" onmouseout="CRateOut(3)" onclick="CRateClick(3)" class="bi bi-star fs-4"></span></li>
                            <li class="mx-2"><span onmouseover="CRateOver(4)" id="span4" onmouseout="CRateOut(4)" onclick="CRateClick(4)" class="bi bi-star fs-4"></span></li>
                            <li class="mx-2"><span onmouseover="CRateOver(5)" id="span5" onmouseout="CRateOut(5)" onclick="CRateClick(5)" class="bi bi-star fs-4"></span></li>
                        </ul>
                        <div class="col-12">
                            <textarea name="Reviews" id="Reviews" class="form-control" rows="5" placeholder="Your Comment"></textarea>
                        </div>
                        <div class="col-12 text-end">
                            <button type="submit" class="btn btn-primary">Post comment</button>
                        </div>
                    }
                </div>
                <div class="mt-5">
                    @foreach (var item in Model.review)
                    {

                        <div class="card mb-2 border-0 border-bottom py-3">
                            <div class="card-header border-0 bg-white d-flex justify-content-between">
                                <div class="d-flex">
                                    @if (item.User.image != null)
                                    {
                                        <a href="user-profile.html" class="user-avatar user-avatar-xl me-2">
                                            <img src="~/assets/images/userImage/@item.User.image" width="40" height="40" class="rounded-circle p-1 border" alt="">
                                        </a>
                                    }
                                    else
                                    {
                                        <a href="user-profile.html" class="user-avatar user-avatar-xl me-2">
                                            <img src="~/assets/images/avatars/team4.jpg" width="40" height="40" class="rounded-circle p-1 border" alt="">
                                        </a>
                                    }
                                    <div>
                                        <h2 class="h6 mt-2 mb-0">@item.User.firstname @item.User.lastname  </h2>
                                        <p class="text-muted mb-1"> @item.Date.ToString("dd MMM yyyy") </p>
                                        <p class="text-muted mb-0"> @item.Reviews </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="col-lg-3">
                <div data-sticky data-margin-top="120" data-sticky-for="991">
                    <div class="row g-2 bg-gradient">
                        <h5 class="fw-bold">Categories</h5>
                        @foreach (var cate in @Model.blogcategory)
                        {
                            <div class="d-flex justify-content-between align-items-center rounded p-2 position-relative">
                                <h6 class="m-0">@cate.Category</h6>
                                <a href="#" class="badge text-dark fs-6 fw-normal text-decoration-none">09</a>
                            </div>

                        }
                        @*<div class="d-flex justify-content-between align-items-center bg-info-soft rounded p-2 position-relative">
                                <h6 class="m-0 text-info">Travel</h6>
                                <a href="#" class="badge bg-info stretched-link">25</a>
                            </div>
                            <div class="d-flex justify-content-between align-items-center bg-danger-soft rounded p-2 position-relative">
                                <h6 class="m-0 text-danger">Photography</h6>
                                <a href="#" class="badge bg-danger stretched-link">75</a>
                            </div>
                            <div class="d-flex justify-content-between align-items-center bg-primary-soft rounded p-2 position-relative">
                                <h6 class="m-0 text-primary">Covid-19</h6>
                                <a href="#" class="badge bg-primary stretched-link">19</a>
                            </div>
                            <div class="d-flex justify-content-between align-items-center bg-success-soft rounded p-2 position-relative">
                                <h6 class="m-0 text-success">Business</h6>
                                <a href="#" class="badge bg-success stretched-link">35</a>
                            </div>*@
                    </div>

                    @*<div class="bg-light p-4 mt-4 rounded-3 text-center">
                        <h4>Subscribe to our mailing list!</h4>
                        <form>
                            <div class="mb-3">
                                <input type="email" class="form-control" placeholder="Email address">
                            </div>
                            <button type="submit" class="btn btn-primary">Subscribe</button>
                            <div class="form-text">We don't spam</div>
                        </form>
                    </div>*@
                    <div class="mt-4">
                        <a href="#" class="d-block card-img-flash">
                            <img src="assets/images/adv.png" alt="">
                        </a>
                    </div>
                </div>
            </div>
        </div>

    </div>
</section>
<div class="modal" id="sucessModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center">
                <i class="bi bi-check-circle-fill fs-1 text-success mb-2 d-block"></i>
                <p class="mb-5 fw-bold px-5">@TempData["success"]</p>
                <button class="btn btn-primary btn-sm" data-bs-dismiss="modal">Ok</button>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script src="~/assets/vendor/jquery/jquery.min.js"></script>
    @if (TempData["success"] != null)
    {
        <script>
            var myModalEl = new bootstrap.Modal(document.getElementById('sucessModal'), {})
            myModalEl.show()
        </script>
    }
    <script>

        function CRateOver(rating) {
            for (var i = 1; i <= rating; i++) {
                $("#span" + i).attr("class", "bi-star-fill text-warning fs-4")
            }
        }

        function CRateOut(rating) {
            for (var i = 1; i <= rating; i++) {
                $("#span" + i).attr("class", "bi-star fs-4")
            }
        }

        function CRateClick(rating) {
            $("#Rating").val(rating);
            console.log($("#Rating").val())
            for (var i = 1; i <= rating; i++) {
                $("#span" + i).attr("class", "bi-star-fill text-warning fs-4")
            }
            for (var i = rating + 1; i <= 5; i++) {
                $("#span" + i).attr("class", "bi-star fs-4")
            }
        }
        function CRateSelected(rating) {
            var rat = $("#Rating").val();
            console.log("rat", rat)
            for (var i = 1; i <= rat; i++) {
                $("#span" + i).attr("class", "bi-star-fill text-warning fs-4")
            }
        }
    </script>
    @*<script>
            function _classCallCheck(t, i) { if (!(t instanceof i)) throw new TypeError("Cannot call a class as a function") } function _defineProperties(t, i) { for (var e = 0; e < i.length; e++) { var s = i[e]; s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(t, s.key, s) } } function _createClass(t, i, e) { return i && _defineProperties(t.prototype, i), e && _defineProperties(t, e), t } var Sticky = function () { function e() { var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", i = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {}; _classCallCheck(this, e), this.selector = t, this.elements = [], this.version = "1.3.0", this.vp = this.getViewportSize(), this.body = document.querySelector("body"), this.options = { wrap: i.wrap || !1, wrapWith: i.wrapWith || "<span></span>", marginTop: i.marginTop || 0, marginBottom: i.marginBottom || 0, stickyFor: i.stickyFor || 0, stickyClass: i.stickyClass || null, stickyContainer: i.stickyContainer || "body" }, this.updateScrollTopPosition = this.updateScrollTopPosition.bind(this), this.updateScrollTopPosition(), window.addEventListener("load", this.updateScrollTopPosition), window.addEventListener("scroll", this.updateScrollTopPosition), this.run() } return _createClass(e, [{ key: "run", value: function () { var i = this, e = setInterval(function () { if ("complete" === document.readyState) { clearInterval(e); var t = document.querySelectorAll(i.selector); i.forEach(t, function (t) { return i.renderElement(t) }) } }, 10) } }, { key: "renderElement", value: function (t) { var i = this; t.sticky = {}, t.sticky.active = !1, t.sticky.marginTop = parseInt(t.getAttribute("data-margin-top")) || this.options.marginTop, t.sticky.marginBottom = parseInt(t.getAttribute("data-margin-bottom")) || this.options.marginBottom, t.sticky.stickyFor = parseInt(t.getAttribute("data-sticky-for")) || this.options.stickyFor, t.sticky.stickyClass = t.getAttribute("data-sticky-class") || this.options.stickyClass, t.sticky.wrap = !!t.hasAttribute("data-sticky-wrap") || this.options.wrap, t.sticky.stickyContainer = this.options.stickyContainer, t.sticky.container = this.getStickyContainer(t), t.sticky.container.rect = this.getRectangle(t.sticky.container), t.sticky.rect = this.getRectangle(t), "img" === t.tagName.toLowerCase() && (t.onload = function () { return t.sticky.rect = i.getRectangle(t) }), t.sticky.wrap && this.wrapElement(t), this.activate(t) } }, { key: "wrapElement", value: function (t) { t.insertAdjacentHTML("beforebegin", t.getAttribute("data-sticky-wrapWith") || this.options.wrapWith), t.previousSibling.appendChild(t) } }, { key: "activate", value: function (t) { t.sticky.rect.top + t.sticky.rect.height < t.sticky.container.rect.top + t.sticky.container.rect.height && t.sticky.stickyFor < this.vp.width && !t.sticky.active && (t.sticky.active = !0), this.elements.indexOf(t) < 0 && this.elements.push(t), t.sticky.resizeEvent || (this.initResizeEvents(t), t.sticky.resizeEvent = !0), t.sticky.scrollEvent || (this.initScrollEvents(t), t.sticky.scrollEvent = !0), this.setPosition(t) } }, { key: "initResizeEvents", value: function (t) { var i = this; t.sticky.resizeListener = function () { return i.onResizeEvents(t) }, window.addEventListener("resize", t.sticky.resizeListener) } }, { key: "destroyResizeEvents", value: function (t) { window.removeEventListener("resize", t.sticky.resizeListener) } }, { key: "onResizeEvents", value: function (t) { this.vp = this.getViewportSize(), t.sticky.rect = this.getRectangle(t), t.sticky.container.rect = this.getRectangle(t.sticky.container), t.sticky.rect.top + t.sticky.rect.height < t.sticky.container.rect.top + t.sticky.container.rect.height && t.sticky.stickyFor < this.vp.width && !t.sticky.active ? t.sticky.active = !0 : (t.sticky.rect.top + t.sticky.rect.height >= t.sticky.container.rect.top + t.sticky.container.rect.height || t.sticky.stickyFor >= this.vp.width && t.sticky.active) && (t.sticky.active = !1), this.setPosition(t) } }, { key: "initScrollEvents", value: function (t) { var i = this; t.sticky.scrollListener = function () { return i.onScrollEvents(t) }, window.addEventListener("scroll", t.sticky.scrollListener) } }, { key: "destroyScrollEvents", value: function (t) { window.removeEventListener("scroll", t.sticky.scrollListener) } }, { key: "onScrollEvents", value: function (t) { t.sticky && t.sticky.active && this.setPosition(t) } }, { key: "setPosition", value: function (t) { this.css(t, { position: "", width: "", top: "", left: "" }), this.vp.height < t.sticky.rect.height || !t.sticky.active || (t.sticky.rect.width || (t.sticky.rect = this.getRectangle(t)), t.sticky.wrap && this.css(t.parentNode, { display: "block", width: t.sticky.rect.width + "px", height: t.sticky.rect.height + "px" }), 0 === t.sticky.rect.top && t.sticky.container === this.body ? (this.css(t, { position: "fixed", top: t.sticky.rect.top + "px", left: t.sticky.rect.left + "px", width: t.sticky.rect.width + "px" }), t.sticky.stickyClass && t.classList.add(t.sticky.stickyClass)) : this.scrollTop > t.sticky.rect.top - t.sticky.marginTop ? (this.css(t, { position: "fixed", width: t.sticky.rect.width + "px", left: t.sticky.rect.left + "px" }), this.scrollTop + t.sticky.rect.height + t.sticky.marginTop > t.sticky.container.rect.top + t.sticky.container.offsetHeight - t.sticky.marginBottom ? (t.sticky.stickyClass && t.classList.remove(t.sticky.stickyClass), this.css(t, { top: t.sticky.container.rect.top + t.sticky.container.offsetHeight - (this.scrollTop + t.sticky.rect.height + t.sticky.marginBottom) + "px" })) : (t.sticky.stickyClass && t.classList.add(t.sticky.stickyClass), this.css(t, { top: t.sticky.marginTop + "px" }))) : (t.sticky.stickyClass && t.classList.remove(t.sticky.stickyClass), this.css(t, { position: "", width: "", top: "", left: "" }), t.sticky.wrap && this.css(t.parentNode, { display: "", width: "", height: "" }))) } }, { key: "update", value: function () { var i = this; this.forEach(this.elements, function (t) { t.sticky.rect = i.getRectangle(t), t.sticky.container.rect = i.getRectangle(t.sticky.container), i.activate(t), i.setPosition(t) }) } }, { key: "destroy", value: function () { var i = this; window.removeEventListener("load", this.updateScrollTopPosition), window.removeEventListener("scroll", this.updateScrollTopPosition), this.forEach(this.elements, function (t) { i.destroyResizeEvents(t), i.destroyScrollEvents(t), delete t.sticky }) } }, { key: "getStickyContainer", value: function (t) { for (var i = t.parentNode; !i.hasAttribute("data-sticky-container") && !i.parentNode.querySelector(t.sticky.stickyContainer) && i !== this.body;)i = i.parentNode; return i } }, { key: "getRectangle", value: function (t) { this.css(t, { position: "", width: "", top: "", left: "" }); for (var i = Math.max(t.offsetWidth, t.clientWidth, t.scrollWidth), e = Math.max(t.offsetHeight, t.clientHeight, t.scrollHeight), s = 0, n = 0; s += t.offsetTop || 0, n += t.offsetLeft || 0, t = t.offsetParent;); return { top: s, left: n, width: i, height: e } } }, { key: "getViewportSize", value: function () { return { width: Math.max(document.documentElement.clientWidth, window.innerWidth || 0), height: Math.max(document.documentElement.clientHeight, window.innerHeight || 0) } } }, { key: "updateScrollTopPosition", value: function () { this.scrollTop = (window.pageYOffset || document.scrollTop) - (document.clientTop || 0) || 0 } }, { key: "forEach", value: function (t, i) { for (var e = 0, s = t.length; e < s; e++)i(t[e]) } }, { key: "css", value: function (t, i) { for (var e in i) i.hasOwnProperty(e) && (t.style[e] = i[e]) } }]), e }(); !function (t, i) { "undefined" != typeof exports ? module.exports = i : "function" == typeof define && define.amd ? define([], function () { return i }) : t.Sticky = i }(this, Sticky);
            function isVariableDefined(el) {
                return typeof !!el && (el) != 'undefined' && el != null;
            }
            function stickyHeader() {
                var sb = $('[data-sticky]');
                if (isVariableDefined(sb)) {
                    var sticky = new Sticky('[data-sticky]');
                }

            }
            stickyHeader()

        </script>*@

}